var React = require('react');
var stack = require('@react-navigation/stack');
var i18n = require('i18n-js');
var dateFns = require('date-fns');
var reactNative = require('react-native');
var Pdf = require('react-native-pdf');
var Sound = require('react-native-sound');
var RNFS = require('react-native-fs');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var i18n__default = /*#__PURE__*/_interopDefaultLegacy(i18n);
var Pdf__default = /*#__PURE__*/_interopDefaultLegacy(Pdf);
var Sound__default = /*#__PURE__*/_interopDefaultLegacy(Sound);
var RNFS__default = /*#__PURE__*/_interopDefaultLegacy(RNFS);

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var Home$2={welcome:"Bienvenido a Etendo",productList:"Lista de productos",newProduct:"Añadir nuevo producto",typeProduct:"Buscador de productos",searchBarcode:"Escanear"};var ProductDetail$1={welcome:"Bienvenido a Etendo",newProduct:"Añade un nuevo producto",editProduct:"Editar producto",products:"Productos",nameExample:"Ej. Lata de atún",searchKeyExample:"Eg. ES/0003",barcode:"Código de barras",searchKey:"Clave de Búsqueda",barcodePlaceholder:"Escribe o escanea el código"};var Table$1={products:"Productos",searchKey:"Clave de Búsqueda",barcode:"Código de Barras",barcodeShort:"Cód. Barras",actions:"Acciones",textEmptyTable:"Aún no has creado ningún registro.",commentEmptyTable:"Empieza añadiendo nuevos registros y se verán aquí."};var Modal$1={messageDelete:"Esta seguro de eliminar el producto?"};var Common$1={save:"Guardar",cancel:"Cancelar",accept:"Aceptar",goBack:"Volver"};var Success$1={saveProduct:"Producto creado correctamente",updateProduct:"Producto editado correctamente",deleteProduct:"Producto borrado correctamente"};var ES = {Home:Home$2,ProductDetail:ProductDetail$1,Table:Table$1,Modal:Modal$1,Common:Common$1,"Error":{product:"Ingrese el nombre del producto",deleteProduct:"Ocurrió un error al eliminar el producto",connection:"Error de conexión a la red"},Success:Success$1};

var Home$1={welcome:"Welcome To Etendo",productList:"Product list",newProduct:"Add new product",typeProduct:"Product finder",searchBarcode:"Scan"};var ProductDetail={welcome:"Bienvenido a Etendo",newProduct:"Add new product",editProduct:"Edit product",products:"Products",nameExample:"Eg. tuna can",searchKeyExample:"Eg. ES/0003",barcode:"Barcode",searchKey:"Search Key",barcodePlaceholder:"Type or scan the code"};var Table={products:"Products",searchKey:"Search Key",barcode:"Barcode",barcodeShort:"Barcode",actions:"Actions",textEmptyTable:"There are no records to display.",commentEmptyTable:"Start adding new records and they will be displayed here."};var Modal={messageDelete:"Are you sure to remove the product?"};var Common={save:"Save",cancel:"Cancel",accept:"Accept",goBack:"Go back"};var Success={saveProduct:"Product successfully created",updateProduct:"Product successfully edited",deleteProduct:"Product successfully deleted"};var EN = {Home:Home$1,ProductDetail:ProductDetail,Table:Table,Modal:Modal,Common:Common,"Error":{product:"Enter the product name",deleteProduct:"An error occurred while deleting the product",connection:"Network connection error"},Success:Success};

var supportedLocales = {
    'en-US': EN,
    'es-ES': ES,
};
var Localization = {
    locale: 'en-US',
};
var fallbackLanguage = 'en-US';
var fallbackDateLocale = dateFns.enUS;
var dateLocales = { enUS: dateFns.enUS, esES: dateFns.esES };
var locale = {
    currentDateLocale: null,
    i18n: i18n__default["default"],
    init: function () {
        i18n__default["default"].locale = 'en-US';
        i18n__default["default"].fallbacks = true;
        i18n__default["default"].defaultLocale = fallbackLanguage;
        i18n__default["default"].translations = supportedLocales;
        if (supportedLocales[Localization.locale]) {
            i18n__default["default"].translations[Localization.locale] =
                supportedLocales[Localization.locale];
            this.currentDateLocale =
                dateLocales[Localization.locale.replace('-', '')] || null;
        }
        else {
            i18n__default["default"].translations[fallbackLanguage] = supportedLocales[fallbackLanguage];
            this.currentDateLocale = fallbackDateLocale;
        }
    },
    t: function (key, params) {
        return i18n__default["default"].t(key, params);
    },
    setCurrentLanguage: function (input) {
        var newLocal = input.replace('_', '-');
        i18n__default["default"].locale = newLocal;
        i18n__default["default"].translations = {};
        if (supportedLocales[newLocal]) {
            i18n__default["default"].translations[newLocal] = supportedLocales[newLocal];
        }
    },
    formatDate: function (date, formatStr) {
        try {
            return dateFns.format(date, formatStr, { locale: this.getDeviceLocaleForDate() });
        }
        catch (error) {
            throw new Error("".concat(error.message, " - Params: Date: ").concat(date, " - Format String: ").concat(formatStr));
        }
    },
    parseISODate: function (date) {
        return dateFns.parseISO(date);
    },
    getDeviceLocale: function () {
        if (supportedLocales[Localization.locale]) {
            return i18n__default["default"].locale;
        }
        else {
            return fallbackLanguage;
        }
    },
    getDeviceLocaleForDate: function () {
        return this.currentDateLocale || fallbackDateLocale;
    },
    formatLanguageUnderscore: function (language, dash) {
        switch (language) {
            case 'en':
            case 'en-US':
            case 'en_US':
                return dash ? 'en-US' : 'en_US';
            case 'es':
            case 'es-ES':
            case 'es_ES':
                return dash ? 'es-ES' : 'es_ES';
            default:
                return dash ? 'en-US' : 'en_US';
        }
    },
    getLanguageName: function (language) {
        var formattedLanguage = this.formatLanguageUnderscore(language, true);
        return supportedLocales[formattedLanguage] ? formattedLanguage : null;
    },
    languageByDefault: function () {
        return this.formatLanguageUnderscore('', true);
    },
};

var Home = function (_a) {
    _a.navigationContainer; var sharedFiles = _a.sharedFiles;
    var _b = React.useState(null), audioPlayer = _b[0], setAudioPlayer = _b[1];
    var _c = React.useState(false), isPlaying = _c[0], setIsPlaying = _c[1];
    var _d = React.useState(''), textContent = _d[0], setTextContent = _d[1];
    React.useEffect(function () {
        // Si hay un archivo de texto, leemos su contenido
        if (sharedFiles && sharedFiles.length > 0) {
            var file = sharedFiles[0]; // Tomamos el primer archivo compartido
            if (file.fileMimeType.startsWith('text/')) {
                RNFS__default["default"].readFile(file.filePath, 'utf8')
                    .then(function (content) {
                    setTextContent(content);
                })
                    .catch(function (error) {
                    console.log('Error al leer el archivo de texto:', error);
                });
            }
        }
        // Cleanup on unmount
        return function () {
            if (audioPlayer) {
                audioPlayer.release();
            }
        };
    }, [sharedFiles]);
    var playAudio = function (filePath) {
        if (audioPlayer) {
            // Resume if already loaded
            audioPlayer.play(function (success) {
                if (success) {
                    console.log('Reproducción completada');
                    setIsPlaying(false);
                }
                else {
                    console.log('Error en la reproducción');
                }
            });
            setIsPlaying(true);
        }
        else {
            // Load and play new audio
            var sound_1 = new Sound__default["default"](filePath, '', function (error) {
                if (error) {
                    console.log('Error al cargar el sonido:', error);
                    return;
                }
                sound_1.play(function (success) {
                    if (success) {
                        console.log('Reproducción completada');
                        setIsPlaying(false);
                    }
                    else {
                        console.log('Error en la reproducción');
                    }
                });
                setIsPlaying(true);
            });
            setAudioPlayer(sound_1);
        }
    };
    var pauseAudio = function () {
        if (audioPlayer) {
            audioPlayer.pause();
            setIsPlaying(false);
        }
    };
    var toggleAudioPlayback = function (filePath) {
        if (isPlaying) {
            pauseAudio();
        }
        else {
            playAudio(filePath);
        }
    };
    var renderFileContent = function (file) {
        if (file.fileMimeType === 'application/pdf') {
            return (React__default["default"].createElement(Pdf__default["default"], { source: { uri: file.filePath }, style: styles.pdf, onError: function (error) {
                    console.log(error);
                } }));
        }
        else if (file.fileMimeType.startsWith('image/')) {
            return (React__default["default"].createElement(reactNative.Image, { source: { uri: file.filePath }, style: styles.image, resizeMode: "contain" }));
        }
        else if (file.fileMimeType.startsWith('audio/')) {
            return (React__default["default"].createElement(reactNative.View, { style: styles.audioContainer },
                React__default["default"].createElement(reactNative.TouchableOpacity, { style: styles.audioButton, onPress: function () { return toggleAudioPlayback(file.filePath); } },
                    React__default["default"].createElement(reactNative.Text, { style: styles.audioButtonText }, isPlaying ? 'Pausar Audio' : 'Reproducir Audio'))));
        }
        else if (file.fileMimeType.startsWith('text/')) {
            return (React__default["default"].createElement(reactNative.ScrollView, { style: styles.textContainer },
                React__default["default"].createElement(reactNative.Text, { style: styles.textContent }, textContent)));
        }
        else {
            return (React__default["default"].createElement(reactNative.View, { style: styles.unsupportedContainer },
                React__default["default"].createElement(reactNative.Text, { style: styles.unsupportedText }, "Tipo de archivo no soportado directamente.")));
        }
    };
    return (React__default["default"].createElement(reactNative.View, { style: styles.container }, sharedFiles && sharedFiles.length > 0 ? (sharedFiles.map(function (file, index) { return (React__default["default"].createElement(reactNative.View, { key: index, style: styles.fileContainer },
        React__default["default"].createElement(reactNative.Text, { style: styles.fileName }, file.fileName),
        renderFileContent(file))); })) : (React__default["default"].createElement(reactNative.View, { style: styles.noFileContainer },
        React__default["default"].createElement(reactNative.Text, { style: styles.noFileText }, "No hay archivos compartidos.")))));
};
var styles = reactNative.StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#f7f7f7',
    },
    fileContainer: {
        flex: 1,
        margin: 10,
        backgroundColor: '#fff',
        borderRadius: 8,
        padding: 10,
        elevation: 3,
    },
    fileName: {
        fontSize: 18,
        fontWeight: 'bold',
        marginBottom: 10,
        color: '#333',
    },
    pdf: {
        flex: 1,
        width: reactNative.Dimensions.get('window').width - 40,
        alignSelf: 'center',
    },
    image: {
        flex: 1,
        width: reactNative.Dimensions.get('window').width - 40,
        height: reactNative.Dimensions.get('window').height / 2,
        alignSelf: 'center',
        borderRadius: 8,
    },
    audioContainer: {
        alignItems: 'center',
        marginTop: 20,
    },
    audioButton: {
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: '#3b5998',
        padding: 15,
        borderRadius: 30,
        elevation: 2,
    },
    audioButtonText: {
        color: '#fff',
        marginLeft: 10,
        fontSize: 16,
    },
    textContainer: {
        flex: 1,
        padding: 15,
        backgroundColor: '#eef2f3',
        borderRadius: 8,
    },
    textContent: {
        fontSize: 16,
        lineHeight: 24,
        color: '#333',
    },
    unsupportedContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        padding: 20,
    },
    unsupportedText: {
        fontSize: 16,
        color: 'gray',
        textAlign: 'center',
    },
    noFileContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
    },
    noFileText: {
        fontSize: 18,
        color: 'gray',
    },
});

var Stack = stack.createStackNavigator();
var App = function (_a) {
    var language = _a.language, navigationContainer = _a.navigationContainer, dataUser = _a.dataUser, sharedFiles = _a.sharedFiles;
    React.useEffect(function () {
        locale.init();
    }, []);
    React.useEffect(function () {
        locale.setCurrentLanguage(locale.formatLanguageUnderscore(language));
    }, [language]);
    return (React__default["default"].createElement(Stack.Navigator, { initialRouteName: "Home" },
        React__default["default"].createElement(Stack.Screen, { name: "Home", options: { headerShown: false } }, function (props) { return (React__default["default"].createElement(Home, __assign({}, props, { navigationContainer: navigationContainer, dataUser: dataUser, sharedFiles: sharedFiles }))); })));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
