Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var stack = require('@react-navigation/stack');
var i18n = require('i18n-js');
var dateFns = require('date-fns');
var reactNative = require('react-native');
var Pdf = require('react-native-pdf');
var Sound = require('react-native-sound');
var RNFS = require('react-native-fs');
var etendoUiLibrary = require('etendo-ui-library');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var i18n__default = /*#__PURE__*/_interopDefaultLegacy(i18n);
var Pdf__default = /*#__PURE__*/_interopDefaultLegacy(Pdf);
var Sound__default = /*#__PURE__*/_interopDefaultLegacy(Sound);
var RNFS__default = /*#__PURE__*/_interopDefaultLegacy(RNFS);

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var Home$2={welcome:"Bienvenido a Etendo",productList:"Lista de productos",newProduct:"Añadir nuevo producto",typeProduct:"Buscador de productos",searchBarcode:"Escanear"};var ProductDetail$1={welcome:"Bienvenido a Etendo",newProduct:"Añade un nuevo producto",editProduct:"Editar producto",products:"Productos",nameExample:"Ej. Lata de atún",searchKeyExample:"Eg. ES/0003",barcode:"Código de barras",searchKey:"Clave de Búsqueda",barcodePlaceholder:"Escribe o escanea el código"};var Table$1={products:"Productos",searchKey:"Clave de Búsqueda",barcode:"Código de Barras",barcodeShort:"Cód. Barras",actions:"Acciones",textEmptyTable:"Aún no has creado ningún registro.",commentEmptyTable:"Empieza añadiendo nuevos registros y se verán aquí."};var Modal$1={messageDelete:"Esta seguro de eliminar el producto?"};var Common$1={save:"Guardar",cancel:"Cancelar",accept:"Aceptar",goBack:"Volver"};var Success$1={saveProduct:"Producto creado correctamente",updateProduct:"Producto editado correctamente",deleteProduct:"Producto borrado correctamente"};var ES = {Home:Home$2,ProductDetail:ProductDetail$1,Table:Table$1,Modal:Modal$1,Common:Common$1,"Error":{product:"Ingrese el nombre del producto",deleteProduct:"Ocurrió un error al eliminar el producto",connection:"Error de conexión a la red"},Success:Success$1};

var Home$1={welcome:"Welcome To Etendo",productList:"Product list",newProduct:"Add new product",typeProduct:"Product finder",searchBarcode:"Scan"};var ProductDetail={welcome:"Bienvenido a Etendo",newProduct:"Add new product",editProduct:"Edit product",products:"Products",nameExample:"Eg. tuna can",searchKeyExample:"Eg. ES/0003",barcode:"Barcode",searchKey:"Search Key",barcodePlaceholder:"Type or scan the code"};var Table={products:"Products",searchKey:"Search Key",barcode:"Barcode",barcodeShort:"Barcode",actions:"Actions",textEmptyTable:"There are no records to display.",commentEmptyTable:"Start adding new records and they will be displayed here."};var Modal={messageDelete:"Are you sure to remove the product?"};var Common={save:"Save",cancel:"Cancel",accept:"Accept",goBack:"Go back"};var Success={saveProduct:"Product successfully created",updateProduct:"Product successfully edited",deleteProduct:"Product successfully deleted"};var EN = {Home:Home$1,ProductDetail:ProductDetail,Table:Table,Modal:Modal,Common:Common,"Error":{product:"Enter the product name",deleteProduct:"An error occurred while deleting the product",connection:"Network connection error"},Success:Success};

var supportedLocales = {
    'en-US': EN,
    'es-ES': ES,
};
var Localization = {
    locale: 'en-US',
};
var fallbackLanguage = 'en-US';
var fallbackDateLocale = dateFns.enUS;
var dateLocales = { enUS: dateFns.enUS, esES: dateFns.esES };
var locale = {
    currentDateLocale: null,
    i18n: i18n__default["default"],
    init: function () {
        i18n__default["default"].locale = 'en-US';
        i18n__default["default"].fallbacks = true;
        i18n__default["default"].defaultLocale = fallbackLanguage;
        i18n__default["default"].translations = supportedLocales;
        if (supportedLocales[Localization.locale]) {
            i18n__default["default"].translations[Localization.locale] =
                supportedLocales[Localization.locale];
            this.currentDateLocale =
                dateLocales[Localization.locale.replace('-', '')] || null;
        }
        else {
            i18n__default["default"].translations[fallbackLanguage] = supportedLocales[fallbackLanguage];
            this.currentDateLocale = fallbackDateLocale;
        }
    },
    t: function (key, params) {
        return i18n__default["default"].t(key, params);
    },
    setCurrentLanguage: function (input) {
        var newLocal = input.replace('_', '-');
        i18n__default["default"].locale = newLocal;
        i18n__default["default"].translations = {};
        if (supportedLocales[newLocal]) {
            i18n__default["default"].translations[newLocal] = supportedLocales[newLocal];
        }
    },
    formatDate: function (date, formatStr) {
        try {
            return dateFns.format(date, formatStr, { locale: this.getDeviceLocaleForDate() });
        }
        catch (error) {
            throw new Error("".concat(error.message, " - Params: Date: ").concat(date, " - Format String: ").concat(formatStr));
        }
    },
    parseISODate: function (date) {
        return dateFns.parseISO(date);
    },
    getDeviceLocale: function () {
        if (supportedLocales[Localization.locale]) {
            return i18n__default["default"].locale;
        }
        else {
            return fallbackLanguage;
        }
    },
    getDeviceLocaleForDate: function () {
        return this.currentDateLocale || fallbackDateLocale;
    },
    formatLanguageUnderscore: function (language, dash) {
        switch (language) {
            case 'en':
            case 'en-US':
            case 'en_US':
                return dash ? 'en-US' : 'en_US';
            case 'es':
            case 'es-ES':
            case 'es_ES':
                return dash ? 'es-ES' : 'es_ES';
            default:
                return dash ? 'en-US' : 'en_US';
        }
    },
    getLanguageName: function (language) {
        var formattedLanguage = this.formatLanguageUnderscore(language, true);
        return supportedLocales[formattedLanguage] ? formattedLanguage : null;
    },
    languageByDefault: function () {
        return this.formatLanguageUnderscore('', true);
    },
};

// Colors
var NEUTRAL_0 = '#FCFCFD';
var NEUTRAL_10 = '#F5F6FA';
var NEUTRAL_20 = '#D3D7E9';
var NEUTRAL_100 = '#000000';

var width$1 = reactNative.Dimensions.get('window').width;
var styles = reactNative.StyleSheet.create({
    audioContainer: {
        alignItems: 'center',
        flex: 1,
        justifyContent: 'center',
    },
    backButton: {
        alignItems: 'center',
        flexDirection: 'row',
        marginBottom: 16,
    },
    container: {
        backgroundColor: NEUTRAL_0,
        flex: 1,
    },
    fileContainer: {
        flex: 1,
        padding: 16,
    },
    fileItem: {
        alignItems: 'center',
        borderBottomColor: NEUTRAL_20,
        borderBottomWidth: 1,
        flexDirection: 'row',
        padding: 16,
    },
    fileItemIcon: {
        height: 24,
        marginRight: 16,
        width: 24,
    },
    fileItemText: {
        color: NEUTRAL_100,
        fontSize: 16,
    },
    fileName: {
        color: NEUTRAL_100,
        fontSize: 20,
        fontWeight: '600',
        marginBottom: 16,
    },
    goBackButton: {
        marginLeft: 'auto',
    },
    header: {
        alignItems: 'center',
        borderBottomWidth: 1,
        backgroundColor: NEUTRAL_10,
        borderBottomColor: NEUTRAL_20,
        flexDirection: 'row',
        justifyContent: 'space-between',
        paddingHorizontal: 16,
        paddingVertical: 12,
    },
    headerTitle: {
        fontSize: 18,
        fontWeight: 'bold',
    },
    image: {
        alignSelf: 'center',
        flex: 1,
        resizeMode: 'contain',
        width: width$1 - 32,
    },
    noFileContainer: {
        alignItems: 'center',
        flex: 1,
        justifyContent: 'center',
    },
    noFileText: {
        color: NEUTRAL_100,
        fontSize: 18,
    },
    pdf: {
        alignSelf: 'center',
        flex: 1,
        width: width$1 - 32,
    },
    textContainer: {
        backgroundColor: NEUTRAL_0,
        borderRadius: 8,
        flex: 1,
        marginBottom: 16,
        padding: 16,
    },
    textContent: {
        color: NEUTRAL_100,
        fontSize: 16,
    },
    unsupportedContainer: {
        alignItems: 'center',
        flex: 1,
        justifyContent: 'center',
    },
    unsupportedText: {
        color: NEUTRAL_100,
        fontSize: 18,
    },
});

// getting screen width and height
var width = reactNative.Dimensions.get('screen').width;
var height = reactNative.Dimensions.get('screen').height;
var isTabletDevice = function () {
    var pixelDensity = reactNative.PixelRatio.get();
    var adjustedWidth = width * pixelDensity;
    var adjustedHeight = height * pixelDensity;
    if (pixelDensity < 1.6 && (adjustedWidth >= 1000 || adjustedHeight >= 1000)) {
        return true;
    }
    else {
        return (pixelDensity === 2 && (adjustedWidth >= 1920 || adjustedHeight >= 1920));
    }
};
// Clean file name from unwanted characters
var cleanFileName = function (fileName) {
    return fileName.replace(/[-_][A-Z0-9]{8,}.*?\./, '.');
};
isTabletDevice();

var Home = function (_a) {
    var navigationContainer = _a.navigationContainer, sharedFiles = _a.sharedFiles;
    var _b = React.useState(null), audioPlayer = _b[0], setAudioPlayer = _b[1];
    var _c = React.useState(false), isPlaying = _c[0], setIsPlaying = _c[1];
    var _d = React.useState(''), textContent = _d[0], setTextContent = _d[1];
    var _e = React.useState(null), selectedFile = _e[0], setSelectedFile = _e[1];
    // Set initial selected file based on sharedFiles
    React.useEffect(function () {
        if (sharedFiles && sharedFiles.length > 0) {
            setSelectedFile(sharedFiles.length === 1 ? sharedFiles[0] : null);
        }
    }, [sharedFiles]);
    // Handle file content loading and cleanup
    React.useEffect(function () {
        var sound = null;
        setAudioPlayer(null);
        setIsPlaying(false);
        setTextContent('');
        var readTextFile = function (filePath) { return __awaiter(void 0, void 0, void 0, function () {
            var content, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, RNFS__default["default"].readFile(filePath, 'utf8')];
                    case 1:
                        content = _a.sent();
                        setTextContent(content);
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        console.error('Error reading text file:', error_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); };
        if (selectedFile) {
            if (selectedFile.fileMimeType.startsWith('text/')) {
                readTextFile(selectedFile.filePath);
            }
            else if (selectedFile.fileMimeType.startsWith('audio/')) {
                sound = new Sound__default["default"](selectedFile.filePath, '', function (error) {
                    if (error) {
                        console.error('Error loading sound:', error);
                    }
                });
                setAudioPlayer(sound);
            }
        }
        return function () {
            if (sound)
                sound.release();
        };
    }, [selectedFile]);
    var toggleAudioPlayback = React.useCallback(function () {
        if (audioPlayer) {
            if (isPlaying) {
                audioPlayer.pause();
                setIsPlaying(false);
            }
            else {
                audioPlayer.play(function (success) {
                    setIsPlaying(false);
                    if (!success)
                        console.error('Error in playback');
                });
                setIsPlaying(true);
            }
        }
    }, [audioPlayer, isPlaying]);
    var handleFileSelect = function (file) {
        setSelectedFile(file);
    };
    var renderFileContent = function (file) {
        switch (true) {
            case file.fileMimeType === 'application/pdf':
                return (React__default["default"].createElement(Pdf__default["default"], { source: { uri: file.filePath }, style: styles.pdf, onError: function (error) { return console.error(error); } }));
            case file.fileMimeType.startsWith('image/'):
                return (React__default["default"].createElement(reactNative.Image, { source: { uri: file.filePath }, style: styles.image, resizeMode: "contain" }));
            case file.fileMimeType.startsWith('audio/'):
                return (React__default["default"].createElement(reactNative.View, { style: styles.audioContainer },
                    React__default["default"].createElement(etendoUiLibrary.Button, { typeStyle: 'terciary', text: isPlaying ? 'Pause Audio' : 'Play Audio', onPress: toggleAudioPlayback })));
            case file.fileMimeType.startsWith('text/'):
                return (React__default["default"].createElement(reactNative.ScrollView, { style: styles.textContainer },
                    React__default["default"].createElement(reactNative.Text, { style: styles.textContent }, textContent)));
            default:
                return (React__default["default"].createElement(reactNative.View, { style: styles.unsupportedContainer },
                    React__default["default"].createElement(reactNative.Text, { style: styles.unsupportedText }, "File type not supported.")));
        }
    };
    var renderFileItem = function (_a) {
        var item = _a.item;
        return (React__default["default"].createElement(reactNative.TouchableOpacity, { style: styles.fileItem, onPress: function () { return handleFileSelect(item); } },
            React__default["default"].createElement(reactNative.Text, { style: styles.fileItemText }, item.fileName)));
    };
    var handleGoBack = function () {
        if (selectedFile && (sharedFiles === null || sharedFiles === void 0 ? void 0 : sharedFiles.length) > 1) {
            setSelectedFile(null);
        }
        else {
            navigationContainer.goBack();
        }
    };
    return (React__default["default"].createElement(reactNative.View, { style: styles.container },
        React__default["default"].createElement(reactNative.View, { style: styles.header },
            React__default["default"].createElement(reactNative.Text, { style: styles.headerTitle }, "Shared Files"),
            React__default["default"].createElement(etendoUiLibrary.Button, { typeStyle: 'terciary', text: 'Go back', onPress: handleGoBack, iconLeft: React__default["default"].createElement(etendoUiLibrary.ArrowLeftIcon, null) })),
        sharedFiles && sharedFiles.length > 0 ? (selectedFile && sharedFiles.length > 1 ? (React__default["default"].createElement(reactNative.View, { style: styles.fileContainer },
            React__default["default"].createElement(reactNative.Text, { style: styles.fileName }, selectedFile.fileName),
            renderFileContent(selectedFile))) : sharedFiles.length > 1 ? (React__default["default"].createElement(reactNative.FlatList, { data: sharedFiles, keyExtractor: function (_, index) { return index.toString(); }, renderItem: renderFileItem, contentContainerStyle: { paddingBottom: 16 } })) : (React__default["default"].createElement(reactNative.View, { style: styles.fileContainer },
            React__default["default"].createElement(reactNative.Text, { style: styles.fileName }, cleanFileName(sharedFiles[0].fileName)),
            renderFileContent(sharedFiles[0])))) : (React__default["default"].createElement(reactNative.View, { style: styles.noFileContainer },
            React__default["default"].createElement(reactNative.Text, { style: styles.noFileText }, "No files uploaded.")))));
};

var Stack = stack.createStackNavigator();
var App = function (_a) {
    var language = _a.language, navigationContainer = _a.navigationContainer, dataUser = _a.dataUser, sharedFiles = _a.sharedFiles;
    React.useEffect(function () {
        locale.init();
    }, []);
    React.useEffect(function () {
        locale.setCurrentLanguage(locale.formatLanguageUnderscore(language));
    }, [language]);
    return (React__default["default"].createElement(Stack.Navigator, { initialRouteName: "Home" },
        React__default["default"].createElement(Stack.Screen, { name: "Home", options: { headerShown: false } }, function (props) { return (React__default["default"].createElement(Home, __assign({}, props, { navigationContainer: navigationContainer, dataUser: dataUser, sharedFiles: sharedFiles }))); })));
};

exports.App = App;
exports["default"] = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
